-- File type LUA
-- The basic bootstrap.
-- Logs in and sends the computer ID and CraftOS version.

Log = {}

function Log.write(write)
  io.write(write)
  local file = fs.open( "log.txt", "a" )
  file.write( write )
  file.close()
end

function Log.preText()
  local time = os.time()
  local formattedTime = textutils.formatTime(time, true)
  term.setTextColor( colors.cyan )
  Log.write(formattedTime .. " > ")
end

function Log.info(s)
  Log.preText()
  term.setTextColor( colors.green )
  Log.write("[INFO] ")
  term.setTextColor( colors.white)
  Log.write(s .. "\n")
end

function Log.warning(s)
  Log.preText()
  term.setTextColor( colors.yellow )
  Log.write("[WARN] ")
  term.setTextColor( colors.white)
  Log.write(s .. "\n")
end

function Log.error(s)
  Log.preText()
  term.setTextColor( colors.orange )
  Log.write("[ERROR] ")
  term.setTextColor( colors.white)
  Log.write(s .. "\n")
end

function Log.fatal(s)
  Log.preText()
  term.setTextColor( colors.red )
  Log.write("[FATAL] ")
  term.setTextColor( colors.white)
  Log.write(s .. "\n")
  error()
end

function Log.debug(s)
  Log.preText()
  term.setTextColor( colors.magenta )
  Log.write("[DEBUG] ")
  term.setTextColor( colors.white)
  Log.write(s .. "\n")
end

log = Log

log.info("Starting")

if not http then
  log.fatal( "The http library is not enabled!" )
end

-- Information about computer.
local computerID = tostring( os.getComputerID() )
local computerVersion = tostring( os.version() )
local computerLabel = os.getComputerLabel()

-- Other variables.
local serverAddress = "http://localhost:8000"
local enviroment = "TurtleOverlord"

local libraries = {"crc32API" ,"md5API", "sha256API", "rpc", "driver1_7", "jsonAPI"}

-- Check if the computer is a turtle.
if turtle then
  log.info( "This computer is a turtle!" )
end

 -- Connect function.
 -- handle - Handler.
 -- data - Data to be posted.
 -- type - GET or POST
local function connect( handle , data , type )
  log.info( "Connecting to " .. serverAddress .. "/" .. handle .. "... " )

  local ok, err = http.checkURL( serverAddress .. "/" .. handle )
  if not ok then
    log.error( "[ERROR] Failed check." )
    if err then
      printError( err )
    end
    return nil
  end

  if type == "GET" then
    response = http.get( serverAddress .. "/" .. handle )
  elseif type == "POST" then
    response = http.post( serverAddress .. "/" .. handle , data )
  end

  if not response then
    log.error( "Failed." )
    return nil
  end

  log.info( "Success!" )

  local sResponse = response.readAll()
  response.close()
  return sResponse
end

local function checkFile(file)
  local sPath = shell.resolve( enviroment .. "/" .. file )
  if not fs.exists( sPath ) then
    log.info("Downloading " .. file .. "...")
    local response = connect( "public/computer/" .. file , nil , "GET" )
    if response then
      local file = fs.open( sPath, "w" )
      file.write( response )
      file.close()
    end
  end

  return sPath
end

local function load(lib)
  sPath = checkFile(lib)

  loaded = os.loadAPI( sPath )

  if loaded then
    log.info(lib .. " loaded!")
  else
    log.error(lib .. " failed to load!")
  end
end

function init()
  for key, value in ipairs(libraries) do
    load(value)
  end

  -- Login to the server.
  log.info("Logging in...")
  local response = connect( "bootstrap" , "version=" .. computerVersion .. "&id=" .. computerID , "POST" )
  if response then
    local obj = jsonAPI.decode( response )

    log.debug( obj.driverChecksum )

    os.setComputerLabel(obj.setLabel)
  end

  -- GET CRC32 for file
  file = fs.open(enviroment .. "/test.txt", "r")
  log.debug(crc32API.hash_s(file.readAll(),0xEDB88320))
  file.close()
end

-- Start infinite loop.
function run()
  while true do
    log.info( "Looking for a job." )
    local response = connect( "job" , "label=" .. computerLabel , "POST" )
    if response then
      local obj = jsonAPI.decode( response )

      local returns = rpc.doCall(obj.id, obj.method, obj.params)
    end
    os.sleep(1)
  end
end

init()

--[[ RPC

Some example rpc calls

--> {"jsonrpc": "2.0", "method": "subtract", "params": {"subtrahend": 23, "minuend": 42}, "id": 3}
<-- {"jsonrpc": "2.0", "result": 19, "id": 3}

--> {"jsonrpc": "2.0", "method": "subtract", "params": {"minuend": 42, "subtrahend": 23}, "id": 4}
<-- {"jsonrpc": "2.0", "result": 19, "id": 4}

]]--

function doCall(id,func, ...)
  if func ~= "new" and func ~= "loadAPI"  then
    print("Not allowed to call new or LoadAPI")
    return
  end

  local argStr = ""
  for i=1, #arg-1 do
    if type(arg[i]) ~= "string" then
      argStr = argStr..textutils.serialize(arg[i])..", "
    else
      argStr = argStr.."\""..arg[i].."\""..", "
    end
  end
  if type(arg[#arg]) ~= "string" then
    argStr = argStr..textutils.serialize(arg[#arg])
  else
    argStr = argStr.."\""..arg[#arg].."\""
  end

  local fn, err = loadstring("return rpc."..func.."("..argStr..")")

  if fn then
    local pcall_return = {pcall(fn)}
     if pcall_return[1] then
       local returns = {}
       if pcall_return[1] then
         local returns = {}
         for i=2, #pcall_return do
           table.insert(returns, pcall_return[i])
         end
         return returns
       else
         if string.find(pcall_return[2], "attempt to call nil") ~= nil then
           return {"attempt to call nil"}
         elseif string.find(pcall_return[2], "attempt to call table") ~= nil then
           return {"attempt to call table"}
         else
           return {pcall_return[2]}
         end
       end
     end
  else
    return {err}
  end
end

function new(func, body)
  if func ~= "doCall" and func ~= "remoteCall" and func ~= "new" and func ~= "loadAPI" and func ~= "run" then
    if type(body) == "string" then
      _G["rpc"][func] = loadstring(body)
    elseif type(body) == "function" then
      _G["rpc"][func] = body
    else
      error("Invalid function passed to rpc.new")
      end
    end
end
